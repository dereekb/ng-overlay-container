{"version":3,"file":"ng-overlay-container.mjs","sources":["../../../projects/ng-overlay-container/src/lib/models/ng-overlay-container-configuration.interface.ts","../../../projects/ng-overlay-container/src/lib/popover-component/ng-popover-reference.ts","../../../projects/ng-overlay-container/src/lib/popover-component/ng-popover.component.html","../../../projects/ng-overlay-container/src/lib/popover-component/ng-popover.component.ts","../../../projects/ng-overlay-container/src/lib/ng-overlay-container.service.ts","../../../projects/ng-overlay-container/src/lib/ng-overlay-container.module.ts","../../../projects/ng-overlay-container/src/public-api.ts","../../../projects/ng-overlay-container/src/ng-overlay-container.ts"],"sourcesContent":["import { HorizontalConnectionPos, VerticalConnectionPos } from '@angular/cdk/overlay';\n\n/**\n * Configuration for the overlay container\n */\nexport interface NgOverlayContainerConfiguration {\n  /**\n   * Width of the overlay.\n   *\n   * Default: 400px\n   */\n  width?: string;\n\n  /**\n   * Height of the overlay.\n   *\n   * Default: 500px\n   */\n  height?: string;\n\n  /**\n   * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n   */\n  minWidth?: number | string;\n\n  /**\n   * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n   */\n  minHeight?: number | string;\n\n  // Currently there is an issue in the Angular CDK that messes up the maxWidth and maxHeight when using FlexibleConnectedPositionStrategy \n  // /**\n  //  * The max-width of the overlay panel. If a number is provided, pixel units are assumed.\n  //  */\n  // maxWidth?: number | string;\n\n  // /**\n  //  * The max-height of the overlay panel. If a number is provided, pixel units are assumed.\n  //  */\n  // maxHeight?: number | string;\n\n  /**\n   * Custom class for the overlay pane.\n   *\n   * Default: ng-overlay-container\n   */\n  panelClass?: string;\n\n  /**\n   * Whether the dialog has a backdrop.\n   *\n   * Default: true\n   */\n  hasBackdrop?: boolean;\n\n  /**\n   * Custom class for the backdrop.\n   *\n   * Default: cdk-overlay-transparent-backdrop\n   */\n  backdropClass?: string;\n\n  /**\n   * Wether the overlay should be positioned globaly on the screen.\n   *\n   * Default: false\n   */\n  useGlobalPositionStrategy?: boolean;\n\n  /**\n   * Horizontal dimension of a connection point on the perimeter of the origin.\n   *\n   * Default: 'center'\n   */\n  originX?: HorizontalConnectionPos;\n\n  /**\n   * Vertical dimension of a connection point on the perimeter of the origin.\n   *\n   * Default: 'bottom'\n   */\n  originY?: VerticalConnectionPos;\n\n  /**\n   * Horizontal dimension of a connection point on the perimeter of the overlay element.\n   *\n   * Default: 'center'\n   */\n  overlayX?: HorizontalConnectionPos;\n\n  /**\n   * Vertical dimension of a connection point on the perimeter of the overlay element.\n   *\n   * Default: 'top'\n   */\n  overlayY?: VerticalConnectionPos;\n\n  /**\n   * Offset along the X axis in px.\n   *\n   * Default: 0\n   */\n  offsetX?: number;\n\n  /**\n   * Offset along the Y axis in px.\n   *\n   * Default: 10\n   */\n  offsetY?: number;\n\n  /**\n   * Wether the overlay is draggable.\n   *\n   * Default: false\n   */\n  isDraggable?: boolean;\n\n  /**\n   * Wether the overlay is resizable.\n   *\n   * Default: true\n   */\n  isResizable?: boolean;\n\n  /**\n   * Wether the overlay should close when clicking outside.\n   *\n   * Default: false\n   */\n  disableBackdropClose?: boolean;\n}\n\n/**\n * Default overlay container configuration\n */\nexport const DEFAULT_OVERLAY_CONFIGURATION: NgOverlayContainerConfiguration = {\n  hasBackdrop: true,\n  backdropClass: 'cdk-overlay-transparent-backdrop',\n  panelClass: 'ng-overlay-container',\n  useGlobalPositionStrategy: false,\n  width: '400px',\n  height: '500px',\n  originX: 'center',\n  originY: 'bottom',\n  overlayX: 'center',\n  overlayY: 'top',\n  offsetX: 0,\n  offsetY: 10,\n  isDraggable: false,\n  isResizable: true,\n  disableBackdropClose: false\n};\n","import { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\nimport { Subject } from 'rxjs';\nimport { NgOverlayContainerContent } from '../models/ng-overlay-container-content.type';\nimport { NgPopoverCloseEvent, NgPopoverCloseType } from '../models/ng-popover-close-event.interface';\n\n/**\n * The reference to the popover container.\n * @param T The data passed into the container to be available in the embedded e.g. component\n * @param R The response data type returned from the afterClosed$ observable when calling close(data?: R)\n */\nexport class NgPopoverRef<T = any, R = any> {\n  private afterClosed = new Subject<NgPopoverCloseEvent<R>>();\n  private initialOverlayConfig: OverlayConfig;\n  private toggled: boolean;\n\n  /**\n   * Observable to retrieve the returned data\n   */\n  public afterClosed$ = this.afterClosed.asObservable();\n\n  constructor(\n    private _overlay: Overlay,\n    public overlay: OverlayRef,\n    public content: NgOverlayContainerContent,\n    public data: T,\n    public isDraggable?: boolean,\n    public disableBackdropClose?: boolean\n  ) {\n    this.initialOverlayConfig = overlay.getConfig();\n    this.toggled = false;\n    if (!disableBackdropClose) {\n      overlay.backdropClick().subscribe(() => this._close('backdropClick', null));\n    }\n  }\n\n  /**\n   * Sets new width and/or height values. If omitted the current value is used\n   * @param width The new width\n   * @param height The new height\n   */\n  public resize(width?: string, height?: string): void {\n    const currentConfig = this.overlay.getConfig();\n    this.overlay.updateSize({ width: width ?? currentConfig.width, height: height ?? currentConfig.height });\n  }\n\n  /**\n   * Toggle maximize of the overlay\n   */\n  public toggleMaximize(): void {\n    if (!this.toggled) {\n      this.overlay.updatePositionStrategy(\n        this._overlay\n          .position()\n          .flexibleConnectedTo({} as HTMLElement)\n          .withPositions([\n            {\n              originX: 'center',\n              originY: 'bottom',\n              overlayX: 'center',\n              overlayY: 'top',\n              offsetX: 0,\n              offsetY: 0\n            }\n          ])\n      );\n      this.overlay.updateSize({ width: '100%', height: '100%' });\n    } else {\n      this.overlay.updateSize({\n        width: this.initialOverlayConfig.width,\n        height: this.initialOverlayConfig.height\n      });\n      this.overlay.updatePositionStrategy(this.initialOverlayConfig.positionStrategy);\n    }\n    this.toggled = !this.toggled;\n  }\n\n  /**\n   * Closes the container e.g. on a button click\n   * @param data The data returned when closing the container\n   */\n  public close(data?: R): void {\n    this._close('close', data);\n  }\n\n  private _close(type: NgPopoverCloseType, data: R): void {\n    this.overlay.dispose();\n    this.afterClosed.next({\n      type,\n      data\n    });\n    this.afterClosed.complete();\n  }\n}\n","<div cdkDrag\n     cdkDragHandle\n     cdkDragRootElement=\".cdk-overlay-pane\"\n     [cdkDragDisabled]=\"!isDraggable\"\n     [cdkDragBoundary]=\"'body'\"\n     id=\"ng-popover\"\n     class=\"ng-popover\">\n  <ng-container [ngSwitch]=\"ngRenderMethod\">\n\n    <div *ngSwitchCase=\"'text'\"\n         [innerHTML]=\"content\"></div>\n\n    <ng-container *ngSwitchCase=\"'template'\">\n      <ng-container *ngTemplateOutlet=\"content; context: context\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"'component'\">\n      <ng-container *ngComponentOutlet=\"content\"></ng-container>\n    </ng-container>\n\n  </ng-container>\n</div>","import { Component, OnInit, TemplateRef, ViewEncapsulation } from '@angular/core';\nimport { NgOverlayContainerContent } from '../models/ng-overlay-container-content.type';\nimport { NgPopoverRenderMethod } from '../models/ng-popover-render-method.type';\nimport { NgPopoverRef } from './ng-popover-reference';\n\n/**\n * The host component that embeds the provided content\n */\n@Component({\n    templateUrl: './ng-popover.component.html',\n    styleUrls: ['./ng-popover.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgPopoverComponent implements OnInit {\n    public ngRenderMethod: NgPopoverRenderMethod;\n    public content: NgOverlayContainerContent;\n    public context: { data: any; close: any };\n    public isDraggable?: boolean;\n\n    public constructor(private ngPopoverRef: NgPopoverRef) {}\n\n    ngOnInit() {\n        this.content = this.ngPopoverRef.content;\n        this.isDraggable = this.ngPopoverRef.isDraggable;\n\n        if (typeof this.content === 'string') {\n            this.ngRenderMethod = 'text';\n        } else if (this.content instanceof TemplateRef) {\n            this.ngRenderMethod = 'template';\n            this.context = {\n                data: this.ngPopoverRef.data,\n                close: this.ngPopoverRef.close.bind(this.ngPopoverRef)\n            };\n        } else {\n            this.ngRenderMethod = 'component';\n        }\n    }\n}\n","import { ConnectionPositionPair, Overlay, OverlayConfig, PositionStrategy } from '@angular/cdk/overlay';\nimport { ComponentPortal, PortalInjector } from '@angular/cdk/portal';\nimport { Injectable, Injector } from '@angular/core';\nimport {\n  DEFAULT_OVERLAY_CONFIGURATION,\n  NgOverlayContainerConfiguration\n} from './models/ng-overlay-container-configuration.interface';\nimport { NgOverlayContainerParameters } from './models/ng-overlay-container-parameters.interface';\nimport { NgPopoverRef } from './popover-component/ng-popover-reference';\nimport { NgPopoverComponent } from './popover-component/ng-popover.component';\n\n/**\n * The NgOverlayContainerService is an injectable service to open a {@link NgPopoverComponent} that behaves as a parent\n * where anything from text, component or template can be embedded dynamically.\n *\n */\n@Injectable()\nexport class NgOverlayContainerService {\n  public constructor(private overlay: Overlay, private injector: Injector) {}\n\n  /**\n   * Opens an popover relative to the {@param origin} with the provided {@param content}.\n   * @param T The data passed into the container to be available in the embedded e.g. component\n   * @param R The response data type returned from the afterClosed$ observable when calling close(data?: R)\n   * @param content The dynamic content to be rendered: 'template' | 'component' | 'text'\n   * @param origin The origin to which the popover is attached. Not needed if used in combination with NgOverlayContainerConfiguration.useGlobalPositionStrategy = true. If the overlay can't be displayed on the screen, fallback positions are used\n   * @param data Any data that is needed in the rendered component (accessible from the component constructor via the PopoverRef (DI)) or in the template via template variable let-data\n   * @param configuration Any custom overlay configuration\n   * @returns The reference to the NgPopoverRef\n   */\n  public open<T = any, R = any>({\n    content,\n    origin,\n    data,\n    configuration\n  }: NgOverlayContainerParameters<T>): NgPopoverRef<T, R> {\n    const configurationApplied = { ...DEFAULT_OVERLAY_CONFIGURATION, ...configuration };\n    const overlayRef = this.overlay.create(this.getOverlayConfig(origin, configurationApplied));\n\n    if (configuration?.panelClass) {\n      overlayRef.addPanelClass(configuration.panelClass);\n    }\n\n    if (configurationApplied?.isResizable) {\n      overlayRef.addPanelClass('isResizable');\n    }\n\n    const ngPopoverRef = new NgPopoverRef<T, R>(\n      this.overlay,\n      overlayRef,\n      content,\n      data,\n      configuration?.isDraggable ?? DEFAULT_OVERLAY_CONFIGURATION.isDraggable,\n      configuration?.disableBackdropClose ?? DEFAULT_OVERLAY_CONFIGURATION.disableBackdropClose\n    );\n\n    const injector = this.createInjector(ngPopoverRef, this.injector);\n    overlayRef.attach(new ComponentPortal(NgPopoverComponent, null, injector));\n\n    return ngPopoverRef;\n  }\n\n  private getOverlayConfig(origin: HTMLElement, configuration: NgOverlayContainerConfiguration): OverlayConfig {\n    const config = new OverlayConfig({\n      width: configuration.width,\n      height: configuration.height,\n      hasBackdrop: configuration.hasBackdrop,\n      panelClass: DEFAULT_OVERLAY_CONFIGURATION.panelClass,\n      backdropClass: configuration.backdropClass,\n      positionStrategy: this.getOverlayPosition(origin, configuration),\n      scrollStrategy: this.overlay.scrollStrategies.reposition()\n    });\n\n    return Object.assign(config, {\n      ...(configuration.minWidth && { minWidth: configuration.minWidth }),\n      ...(configuration.minHeight && { minHeight: configuration.minHeight })\n      // ...(configuration.maxWidth && { maxWidth: configuration.maxWidth }),\n      // ...(configuration.maxHeight && { maxHeight: configuration.maxHeight })\n    });\n  }\n\n  private getOverlayPosition(origin: HTMLElement, configuration: NgOverlayContainerConfiguration): PositionStrategy {\n    const positionStrategy = configuration.useGlobalPositionStrategy\n      ? this.overlay\n          .position()\n          .global()\n          .centerHorizontally(configuration.offsetX.toString())\n          .centerVertically(configuration.offsetY.toString())\n      : this.overlay\n          .position()\n          .flexibleConnectedTo(origin)\n          .withPositions(this.getPositions(configuration))\n          .withPush(false);\n\n    return positionStrategy;\n  }\n\n  private getPositions(configuration: NgOverlayContainerConfiguration): ConnectionPositionPair[] {\n    return [\n      {\n        originX: configuration.originX,\n        originY: configuration.originY,\n        overlayX: configuration.overlayX,\n        overlayY: configuration.overlayY,\n        offsetX: configuration.offsetX,\n        offsetY: configuration.offsetY\n      }, // Fallback positions if provided position is not possible\n      {\n        // Bottom\n        originX: 'center',\n        originY: 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n      },\n      {\n        // Right\n        originX: 'end',\n        originY: 'center',\n        overlayX: 'start',\n        overlayY: 'center'\n      },\n      {\n        // Left\n        originX: 'start',\n        originY: 'center',\n        overlayX: 'end',\n        overlayY: 'center'\n      },\n      {\n        // Top\n        originX: 'center',\n        originY: 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n      }\n    ];\n  }\n\n  private createInjector(popoverRef: NgPopoverRef, injector: Injector): PortalInjector {\n    const tokens = new WeakMap([[NgPopoverRef, popoverRef]]);\n    return new PortalInjector(injector, tokens);\n  }\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { NgModule } from '@angular/core';\nimport { NgPopoverComponent } from './popover-component/ng-popover.component';\nimport { NgOverlayContainerService } from './ng-overlay-container.service';\n\n@NgModule({\n  imports: [CommonModule, OverlayModule, PortalModule, DragDropModule],\n  declarations: [NgPopoverComponent],\n  exports: [NgPopoverComponent],\n  providers: [NgOverlayContainerService]\n})\nexport class NgOverlayContainerModule {}\n","/*\n * Public API Surface of ng-overlay-container\n */\n\nexport * from './lib/models/ng-overlay-container-configuration.interface';\nexport * from './lib/models/ng-overlay-container-content.type';\nexport * from './lib/models/ng-overlay-container-parameters.interface';\nexport * from './lib/models/ng-popover-close-event.interface';\nexport * from './lib/models/ng-popover-render-method.type';\nexport * from './lib/ng-overlay-container.module';\nexport * from './lib/ng-overlay-container.service';\nexport * from './lib/popover-component/ng-popover-reference';\nexport * from './lib/popover-component/ng-popover.component';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}